[{"uri":"https://mrhh-k22.github.io/AWS-workshop/4-deploy-backend/4.1-image-s3-bucket/","title":"Create a New S3 Bucket for Image Storage/Retrieval","tags":[],"description":"","content":"Create an S3 Bucket Go to the AWS Management Console at https://aws.amazon.com/\nSearch for and select the S3 service.\nIn the General purpose buckets section, click Create Bucket.\nEnter a bucket name: jobseeker-uploadimage\nIn the Block Public Access settings section, do the following:\nTurn off all block public access options Keep the remaining settings as default.\nClick Create Bucket to complete.\nResult after creating the S3 Bucket: ⚠️ Save the bucket name and region for use in backend configuration later.\nSet Up Bucket Policy Go to the Permissions tab of the bucket.\nScroll down to Bucket policy and click Edit.\nPaste the following JSON into the policy section: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowPublicRead\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::jobseeker-uploadimage/*\u0026#34; } ] } This is an AWS S3 bucket policy that allows everyone to download (read) files in the bucket jobseeker-uploadimage. ⚠️ If you use a different bucket name, replace jobseeker-uploadimage in the \u0026quot;Resource\u0026quot; section with your bucket name.\nClick Save to save the policy. ✅ You have completed setting up an S3 Bucket to serve image storage and retrieval.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/5-deploy-frontend/5.1-setup-react-app/","title":"Deploy React web app","tags":[],"description":"","content":"Clone the React app Clone this GitHub repository using the following URL:\ngit clone https://github.com/MrHH-k22/jobseeker-frontend.git Navigate to the repository directory\ncd jobseeker-frontend Run the following command to install all libraries for the project.\nnpm install Add environment variables\nGo to the .env.production file to update the URL for AWS Beanstalk and S3 bucket for image processing. Run the following command to compile the app source code into static HTML/CSS/JS code ready for server deployment. npm run build After a successful build, a folder named dist will be created, containing all the static code of the application. -\u0026gt; The static files in this folder will be used to deploy to AWS S3.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/1-introduce/","title":"Introduction","tags":[],"description":"","content":"General Overview of the Lab Purpose AWS Services Used System Architecture Contents Introduction Preparation Steps Connect to the EC2 Server "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/1-introduce/1.1-purpose/","title":"Purpose","tags":[],"description":"","content":"Purpose The purpose of this lab is to provide learners with a hands-on, end-to-end experience in building a modern web application. By leveraging AWS services, we aim to develop a scalable, cost-effective, and cloud-native web application.\nLearning Objectives Build a real-world application: Develop a full-featured web app with CRUD functionality and image upload support.\nOptimize performance: Apply best practices for security and performance.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/","title":"Session Management","tags":[],"description":"","content":"Designing a Web App System Using Elastic Beanstalk and CloudFront Overview In this lab, you will learn how to build a complete web application on the AWS cloud platform. The lab is practice-oriented, helping you get familiar with various AWS services through hands-on deployment steps.\nSpecifically, you will be guided to use:\nAmazon S3: Store static websites Amazon RDS: Host SQL databases AWS Elastic Beanstalk: Deploy and scale web applications Amazon CloudFront: Distribute content and secure access The goal of this workshop is to help you understand how to deploy a real-world application system in the cloud environment.\nEstimated Cost This workshop does not incur any cost as you will be using the AWS Free Tier (free for the first 12 months for new accounts), which includes access to basic AWS services.\nEstimated Time to Complete The workshop is expected to take around 2–3 hours, including hands-on practice using the AWS Console:\nIntroduction (15–20 minutes):\nObjectives AWS Services System Architecture Prerequisites (5–10 minutes):\nAWS Account IDE and development environment Deployment Practice (60–90 minutes):\nCreate the database Deploy the backend Build and deploy the frontend Resource Cleanup (15–20 minutes):\nDelete all resources to avoid post-workshop charges Contents Introduction Prerequisites Database Design Using AWS RDS Deploy Backend with AWS Beanstalk Build \u0026amp; Deploy Static Frontend Test Application Features Clean Up Resources "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/3-create-database/3.1-security-group/","title":"Set Up Security Group for Database","tags":[],"description":"","content":"Create a New Security Group Go to the AWS Management Console homepage at https://aws.amazon.com/\nSearch for and select the VPC service.\nIn the VPC Dashboard, select Security Groups.\nClick the Create Security Group button to create a new one.\nIn the Basic Details section, fill in the following information:\nSecurity group name: jobseeker-db Description: Allow RDS port to anywhere VPC: Select the default VPC Add a new Inbound Rule:\nType: MySQL/Aurora Source: Anywhere - IPv4 Note: Leave the Outbound Rules as default.\nClick Create Security Group to finish. Result After Successfully Creating the Security Group: "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/6-testing/6.1-registerlogin/","title":"User Registration/Login Features","tags":[],"description":"","content":"A. Registration Feature Visit the website and click the Login button.\nIn the login dialog, click the Register button.\nFill in the user information and click Submit to submit the form.\nIf successful, the system will display the message: \u0026ldquo;Account registration successful\u0026rdquo;.\nCheck in the Database Open MySQL Workbench and access your database.\nSelect the User table.\nThe newly registered user data will be displayed in the table.\nB. Login Feature Use the registered account to log in to the system.\nAfter a successful login, the system will redirect to the main page or user interface.\n✅ With that, we’ve completed testing the Registration and Login features.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/1-introduce/1.2-services/","title":"AWS Services","tags":[],"description":"","content":"AWS Services Used AWS Web Application Firewall AWS WAF is a security service from AWS that helps protect web applications against common attacks such as SQL injection, Cross-site scripting (XSS), DDos\u0026hellip;\nAmazon CloudFront Amazon CloudFront is a Content Delivery Network (CDN) service that securely delivers data with low latency and high transfer speed.\nAmazon S3 Amazon S3 (Simple Storage Service) is an object storage service that allows flexible, secure, and highly scalable data storage and retrieval. It is commonly used to store images, videos, backups, or static website content.\nAWS IAM AWS IAM (Identity and Access Management) is a service for managing users and access permissions within the AWS ecosystem. It allows you to create users, groups, and roles, and assign policies to securely control access to resources.\nAWS Elastic Beanstalk AWS Elastic Beanstalk helps you deploy and manage web applications automatically. Simply upload your source code, and Beanstalk will handle infrastructure configuration, load balancing, auto-scaling, and application monitoring.\nAWS RDS AWS RDS (Relational Database Service) is a managed relational database service that supports various engines like MySQL, PostgreSQL, SQL Server, and Oracle. It simplifies deployment, operation, backup, security, and scaling of relational databases.\nAWS Backup AWS Backup is a service for automating backup and recovery across multiple AWS services such as EBS, RDS, DynamoDB, S3, etc. It offers centralized backup management, scheduling, policy control, and ensures compliance with security requirements.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/3-create-database/3.2-create-rds/","title":"Create RDS Instance (MySQL)","tags":[],"description":"","content":"Create a New Database with Amazon RDS Go to the AWS Management Console at https://aws.amazon.com/\nSearch for and select the RDS or Aurora and RDS service.\nClick the Create a database button. In the Create database section, configure the following settings:\nDatabase creation method: Standard Create Engine type: MySQL Engine version: 8.0.41 RDS Extended Support: Off Template and Availability \u0026amp; Durability:\nLeave as default (Free Tier will be used) Settings:\nDB instance identifier: jobseeker-db Master username: admin Credential management: Self-managed Master password: Admin2025 (or a stronger password of your choice) ⚠️ Remember this information — it will be needed during backend configuration.\nInstance Configuration and Storage:\nKeep the default settings You may reduce the allocated storage to 20 GB as the lab does not require much Connectivity:\nVPC: Select the default VPC Security group: Select the Security Group created in the previous step Public access: Select Yes Leave the remaining settings as default Click Create Database to start the process. Result After Database Creation: ⚠️ Save the database endpoint — you will need it when configuring the backend.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/5-deploy-frontend/5.2-deploy-to-s3/","title":"Create S3 bucket to deploy React web app","tags":[],"description":"","content":"A. Create S3 Bucket Access AWS Management Console at https://aws.amazon.com/\nSearch for and select S3 service.\nIn the General purpose buckets section, select Create Bucket.\nName the bucket: jobseeker-frontend\nIn the Block Public Access settings section:\nDisable all Block Public Access options Keep all other settings as default.\nClick Create Bucket to complete.\nResult after creating S3 Bucket: B. Upload static code to S3 Click the upload button to start uploading files: Drag all compiled files from the previous step located in the dist folder and drop them here Click upload to start uploading Result when upload is successful: C. Enable S3 static website hosting feature Go to the properties tab Scroll down to the Static website hosting section Click Edit Enable Static website hosting Configure the following: Hosting type: Host a static website Index document: enter index.html Error document: enter index.html Click Save changes to save everything D. Set up Bucket Policy Switch to the Permissions tab of the bucket.\nScroll down to the Bucket policy section and click Edit.\nPaste the following JSON into the policy section: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::jobseeker-frontend/*\u0026#34; } ] } ⚠️ If you use a different bucket name, replace jobseeker-frontend in the \u0026quot;Resource\u0026quot; section with your bucket name.\nClick Save to save the policy. ✅ You have successfully completed deploying the React web app to an S3 Bucket.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/6-testing/6.2-s3image-testing/","title":"Image Storage Testing","tags":[],"description":"","content":"Create a New Company Go to the Dashboard and select the Company tab.\nClick the Add New button.\nFill in the company details and choose an image, then click Create.\nAfter successful creation, the company information will be displayed:\nReturn to the homepage, and you\u0026rsquo;ll see the newly created company listed.\nCheck on AWS S3 Go to your S3 Bucket to verify whether the image has been successfully stored.\n✅ The image has been successfully stored on S3.\nCheck in the Database In the Company table, the data is saved along with the image file\u0026rsquo;s URL pointing to the S3 Bucket.\n✅ We have successfully tested the image storage feature in the project.\nNote:\nCác tính năng khác cũng sẽ được thực hiện và kiểm tra tương tự. "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/2-prerequiste/","title":"Prerequisites","tags":[],"description":"","content":"A. AWS Account and Permissions An AWS account with full access to the following services:\nAmazon S3 (Simple Storage Service) Amazon RDS (Relational Database Service) AWS Elastic Beanstalk Amazon CloudFront AWS IAM (Identity and Access Management) Amazon VPC (Virtual Private Cloud) Amazon EC2 (Elastic Compute Cloud) Recommendation: Use the AWS root account for full access.\nB. Development Environment Node.js (version 16 or higher) npm or yarn package manager Git to clone repositories A text editor (VS Code, IntelliJ, etc.) Java JDK 17 or later Java-supporting IDE (IntelliJ IDEA, Eclipse, etc.) C. Basic Knowledge Required Basic understanding of core AWS services:\nS3 buckets and bucket policies RDS and MySQL database Elastic Beanstalk deployment CloudFront distribution IAM roles and policies D. Preparations Before Starting 1. Required Repositories Access to the following GitHub repositories: Frontend: https://github.com/MrHH-k22/jobseeker-frontend.git Backend: https://github.com/MrHH-k22/jobseeker-backend.git 2. Information to Prepare Prepare and note down the following: Names of S3 buckets Database credentials AWS region to be used (recommended: ap-southeast-1) Endpoint URLs E. Estimated Cost ⚠️ Important Note: This workshop uses AWS services that may incur charges:\nRDS MySQL: ~$15–25/month (if not using Free Tier) Elastic Beanstalk: Free (you only pay for the EC2 instance) S3: ~$1–5/month depending on usage CloudFront: ~$1–10/month depending on traffic Recommendation: Perform resource cleanup after completing the workshop to avoid unexpected charges.\n✅ Once you have completed all the above preparations, you can proceed with the next steps of the workshop.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/4-deploy-backend/4.2-setup-springboot-app/","title":"Setting up Spring Boot app","tags":[],"description":"","content":"Clone the Spring Boot app Clone this GitHub repository using the following URL:\ngit clone https://github.com/MrHH-k22/jobseeker-backend.git Navigate to the repository directory\ncd jobseeker-backend Run the following command to package the Spring Boot app into a JAR file\n./gradlew bootJar In the repository directory, go to build/libs/ to get the JAR file -\u0026gt; We will use this JAR file to deploy to AWS Beanstalk\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/4-deploy-backend/4.3-configure-iam-role/","title":"Configuring IAM Role for AWS Beanstalk","tags":[],"description":"","content":"Create IAM Roles for AWS Elastic Beanstalk Access AWS Management Console at https://aws.amazon.com/\nSearch for and select Identity and Access Management (IAM) service.\nSwitch to the Roles tab and click Create role to begin. A. Create Role for EC2 Instance within Beanstalk Environment Step 1: Select Trusted Entity Trusted entity type: AWS Service Service or use case: EC2 Use case: EC2 Step 2: Add Permissions Search for and add the following policies:\nAmazonS3FullAccess Allows EC2 to access S3 for storing and retrieving images.\nAWSElasticBeanstalkCustomPlatformforEC2Role Grants permissions for EC2 to build and run custom platforms in Elastic Beanstalk.\nStep 3: Name and Complete Role name: aws-elasticbeanstalk-ec2-role Review the added policies before clicking Create role. ✅ Result after successfully creating the role: B. Create Role for Elastic Beanstalk Service Repeat the same steps as in section A, but with the following configuration:\nTrusted Entity Service or use case: Elastic Beanstalk Use case: Elastic Beanstalk - Environment Add the following policies: AWSElasticBeanstalkEnhancedHealth AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy These policies allow Beanstalk to manage environment health and updates more effectively.\nRole name: aws-elasticbeanstalk-service-role ✅ Result after creation: "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/3-create-database/3.3-connect/","title":"Connect to MySQL Workbench","tags":[],"description":"","content":"Connect to MySQL Workbench In MySQL Workbench, create a new connection by selecting MySQL Connections \u0026gt; + (Add Connection).\nEnter the following connection details: Connection name: (aws-jobseeker-db) Hostname: your database endpoint (provided during RDS creation) Username: database username (admin) Password: database password (Admin2025) After entering the information, click on the newly created connection to initiate it:\n✅ Connection successful if no errors occur and the database interface is displayed.\nCreate a new schema in MySQL Workbench Right-click and select Create Schema.. Enter schema name: jobseeker-db Click Apply ⚠️ Save this schema name for use in the backend configuration later.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/3-create-database/3.4-aws-backup/","title":"Database Design Using AWS RDS","tags":[],"description":"","content":"Overview In this section, we will design and deploy the database for the JobSeeker application using Amazon RDS (Relational Database Service). The database plays a crucial role in storing and managing the application\u0026rsquo;s business data.\nObjectives Create and configure a Security Group for the database to ensure security Deploy a MySQL instance on Amazon RDS with appropriate settings Set up the connection and prepare the schema for the application Contents Set Up Security Group for the Database – Create and configure a security group to control access to the database Create RDS Instance (MySQL) – Deploy a MySQL database instance on Amazon RDS Connect to MySQL Workbench – Establish the connection and create the application\u0026rsquo;s schema "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/3-create-database/","title":"Database Design Using AWS RDS","tags":[],"description":"","content":"Overview In this section, we will design and deploy the database for the JobSeeker application using Amazon RDS (Relational Database Service). The database plays a crucial role in storing and managing the application\u0026rsquo;s business data.\nObjectives Create and configure a Security Group for the database to ensure security Deploy a MySQL instance on Amazon RDS with appropriate settings Set up the connection and prepare the schema for the application Contents Set Up Security Group for the Database – Create and configure a security group to control access to the database Create RDS Instance (MySQL) – Deploy a MySQL database instance on Amazon RDS Connect to MySQL Workbench – Establish the connection and create the application\u0026rsquo;s schema "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/5-deploy-frontend/5.3-cloudfront/","title":"Distribute static web content with CloudFront","tags":[],"description":"","content":"A. Create AWS CloudFront Access AWS Management Console at https://aws.amazon.com/.\nSearch for and select CloudFront service.\nIn the Distributions section, click Create Distribution.\nStep 1: Initialize Distribution Enter Distribution name: jobseeker-frontend\nStep 2: Configure Origin Select Origin type: Amazon S3\nIn the S3 origin section, select Browse S3.\nCheck Allow private S3 bucket access to CloudFront Select the S3 bucket created earlier After selection, AWS may suggest using website endpoint since the bucket has static web hosting enabled.\n➤ Click Use website endpoint to update the endpoint:\nResult of S3 endpoint after selection:\n📌 Note: If AWS doesn\u0026rsquo;t show the suggestion, you can manually enter the endpoint following this structure:\nhttp://{bucket-name}.s3-website.{region}.amazonaws.com Step 5: Set up Security (Enable Security) Select: Enable security protections\nEnabling AWS WAF enhances web security by preventing common attacks such as SQL Injection, XSS, and HTTP Flood. It also blocks malicious requests directly at CloudFront, reducing the load on the backend.\nThen, review all configurations and click Create distribution to complete the creation process. D. Result after deploying CloudFront E. Reconfigure Behaviour for CloudFront Switch to the Behaviours tab\nSelect a behaviour and click Edit\nEdit the following settings:\nViewer protocol policy: HTTP and HTTPS Allowed HTTP methods: GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE Keep other settings unchanged → click Save Changes to save the configuration.\nF. Test CloudFront Endpoint Copy the Distribution domain name and paste it into a browser to check the result.\nWebsite interface after successful distribution:\n✅ You have successfully completed distributing static web content through Amazon CloudFront efficiently.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/1-introduce/1.3-architecture/","title":"System Architecture","tags":[],"description":"","content":"Architecture Overview The system is designed based on microservices and cloud-native principles, leveraging AWS managed services. This approach minimizes infrastructure management and allows developers to focus on implementing business logic.\n3-Tier Architecture The application follows a 3-tier architecture, consisting of:\n1. Presentation Tier – User Interface This tier uses the following services to host the static website:\nAWS CloudFront\nDelivers static content (HTML, CSS, JS) from Amazon S3 to end users.\nAWS S3\nHosts the static website — the built ReactJS application.\n2. Application Tier – Business Logic This tier processes the business logic using AWS services:\nAWS Elastic Beanstalk\nAutomatically deploys and manages the server-side application written in Spring Boot.\nAWS IAM\nProvides secure permissions for Elastic Beanstalk to access RDS and S3.\n3. Data Tier – Data Storage This tier includes the following services:\nAmazon RDS (MySQL)\nStores business data using the MySQL relational database engine.\nAWS S3\nStores files such as images uploaded by users.\nAWS Backup\nAutomatically backs up data from Amazon RDS to ensure recovery in case of failures.\n🔧 Additional Supporting AWS Services Amazon SES\nSends email notifications to users (e.g., registration confirmations, password resets).\nAWS CloudWatch\nMonitors system performance, logs activities, and sends alerts from services like Lambda, API Gateway, DynamoDB, and SES.\nSystem Workflow Users access the website via the CloudFront endpoint. CloudFront receives the request and checks whether the frontend files are already cached at the edge location: If cached → returns them directly. If not → fetches files from Amazon S3 and returns them to the user. Once the UI is loaded, the website sends API (HTTP) requests to the backend hosted on Elastic Beanstalk. Elastic Beanstalk handles the requests and connects to Amazon RDS to retrieve or store data. "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/4-deploy-backend/4.4-create-beanstalk/","title":"Deploy AWS Beanstalk","tags":[],"description":"","content":"Create AWS Beanstalk Access AWS Management Console at https://aws.amazon.com/\nSearch for and select Elastic Beanstalk service.\nIn the Application tab, click Create a new application. Application name: jobseekers-backend After creating the Application, proceed to create a new Environment. Step 1: Configure Environment In the Environment tier \u0026amp; Information section: Select Web server environment Environment name: Jobseekers-backend-env Keep all other settings as default In the Platform section: Platform: Java Platform branch: Corretto 17 running on 64 bit Amazon Linux 2023 Platform version: 4.6.1 In the Application code section: Select Upload your code Version label: version01 Choose Local file and upload the .jar file created in the previous step Click Next to continue Step 2: Configure Service Access Service role: select the aws-elasticbeanstalk-service-role created earlier EC2 instance profile: select the aws-elasticbeanstalk-ec2-role created earlier EC2 key pair: leave blank Step 3: Set Up Networking, Database, and Tags Keep all default configurations and continue to the next step Step 4: Configure Instance Traffic and Scaling Keep default configuration Elastic Beanstalk will automatically set up EC2 and Security Group, so no manual configuration is needed Step 5: Configure Updates, Monitoring, and Logging Scroll to the bottom of the page and add the necessary environment variables for the backend Remove unused environment variables and configure new environment variables as follows: Key Value AWS_S3_BASE_FOLDER uploads/ AWS_S3_BUCKET Name of the S3 bucket created in the previous step (e.g., jobseeker-uploadimage) AWS_S3_REGION Region of the S3 bucket, e.g., ap-southeast-1 GRADLE_HOME /usr/local/gradle HOIDANIT_JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS 3600 HOIDANIT_JWT_BASE64_SECRET UxaISAcJlpUx5+626BrxPYyMFphS5WCem/tODCjONXDyKg9wTaZyzwwhi7k6YLs3eJwn4eYdlrdLAYAyrT5FXQ== HOIDANIT_JWT_REFRESH_TOKEN_VALIDITY_IN_SECONDS 2592000 M2 /usr/local/apache-maven/bin M2_HOME /usr/local/apache-maven PORT 8080 SPRING_DATASOURCE_PASSWORD Database access password (set by you when creating the database) SPRING_DATASOURCE_URL JDBC URL of the database (e.g., jdbc:mysql://\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;scheme\u0026gt;) SPRING_DATASOURCE_USERNAME Database username (e.g., admin) SPRING_JPA_HIBERNATE_DDL_AUTO update Click the Create button to start initializing the AWS Elastic Beanstalk environment. Result after creating AWS Beanstalk After creation is complete, click on the backend URL displayed on the screen. If you can access it successfully and receive a message like the one below, it means the backend has been deployed successfully: "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/4-deploy-backend/","title":"Deploy Backend with AWS Beanstalk","tags":[],"description":"","content":"Overview In this section, we will deploy the Java Spring Boot backend application to AWS Elastic Beanstalk to handle APIs and business logic. AWS Elastic Beanstalk automatically configures EC2, creates Security Groups, and manages network interfaces, simplifying the deployment process.\nObjectives Create an S3 Bucket to store images uploaded by users Prepare and build the Spring Boot application into a JAR file Configure the necessary IAM Roles for AWS Elastic Beanstalk Deploy the backend to Elastic Beanstalk with appropriate environment variables Content Create an S3 Bucket for Images – Create and configure an S3 bucket for file uploads Set up Spring Boot App – Clone, build, and prepare the JAR file for deployment Configure IAM Role – Create the required IAM roles for Elastic Beanstalk Deploy to AWS Beanstalk – Create and configure the Elastic Beanstalk environment "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/1-introduce/1.4-app/","title":"Deployed Application","tags":[],"description":"","content":"Deployed Application JobSeeker is a job-search web application developed using a modern architecture, featuring the following core functionalities:\n🎯 Key Features User Management\nAllows registration, login, and authentication using JWT.\nCompany Management\nCreate and edit company profiles, including the ability to upload a company logo.\nJob Management\nPost job listings, search for jobs, and submit applications.\nImage Upload\nStore and manage user images using AWS S3.\n⚠️ Note This workshop is designed for educational purposes, so some features may not be fully implemented. The main goal is to help learners become familiar with the deployment and operation process on the AWS Cloud platform, rather than completing all business logic in the application.\n📄 Copyright The JobSeeker application is copyrighted by Hỏi Dân IT.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/5-deploy-frontend/5.4-fix-cors/","title":"Fix Cross-Origin Resource Sharing Error","tags":[],"description":"","content":"A. The Problem When opening Developer Console in the browser, we see a CORS error like this:\nExplanation:\nCORS error occurs when the frontend (CloudFront) sends requests to the backend (Elastic Beanstalk) on a different domain, but the backend doesn\u0026rsquo;t allow that domain to access it. Specifically, the backend hasn\u0026rsquo;t returned the Access-Control-Allow-Origin header, causing the browser to block the request for security reasons.\nB. Solution 1. Reconfigure CORS in the backend Open the jobseeker_backend project.\nAccess the config/CorsConfig.java file.\nUpdate the frontend endpoint by:\nCopying the CloudFront endpoint Adding it to the setAllowedOrigins method Configuration explanations: setAllowedOrigins: Specifies which domains are allowed to send requests to the backend. setAllowedMethods: Allows HTTP methods like GET, POST, etc. setAllowedHeaders: Specifies which headers the client can send. setAllowCredentials: Allows sending cookies or authentication tokens like JWT. setMaxAge: Sets the cache time for preflight requests. registerCorsConfiguration(\u0026quot;/**\u0026quot;): Applies CORS to all endpoints. Save the file after editing. 2. Rebuild the .jar file and redeploy the backend Perform the steps to rebuild the .jar file similar to section 4.2 previously.\nAccess AWS Management Console, select Elastic Beanstalk service.\nGo to the backend application.\nSelect the Application versions tab.\nClick Upload, select the newly built .jar file.\nName the version: version02 and upload.\nAfter successful upload, select the newly created version → click Actions → select Deploy. Select the corresponding environment and click Deploy to deploy. ✅ You have successfully completed fixing the CORS error, ensuring that the frontend and backend can connect to each other safely and correctly.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/5-deploy-frontend/","title":"Build &amp; Deploy Static Frontend","tags":[],"description":"","content":"Overview In this section, we will build and deploy a React frontend application to Amazon S3 and use CloudFront for content distribution. Using S3 and CloudFront helps optimize performance, reduce latency, and provide a better user experience through a global CDN.\nObjectives Prepare and build the React application into static files Configure S3 bucket to host static website Set up CloudFront distribution to accelerate access speed Connect frontend with the deployed backend API Contents Prepare React App - Clone, configure and build the React application Create S3 for Static Website - Create and configure S3 bucket to host static website Deploy CloudFront - Set up CloudFront distribution for CDN Fix CORS Error - Fix CORS error "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/6-testing/","title":"Feature Testing in the Application","tags":[],"description":"","content":"Overview In this section, we will conduct a basic test of the feature in the deployed JobSeeker application. Testing will ensure that all components are functioning correctly and are smoothly integrated with each other.\nObjectives Verify user registration and login functionality Test features for creating, editing, and managing jobs Test image upload and display functionality from S3 Contents Test Registration \u0026amp; Login – Test authentication and authorization features Test Image Upload – Test image upload and display functionality on S3 "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/7-cleanup/","title":"Clean Up Resources","tags":[],"description":"","content":"Clean Up AWS Resources We will clean up AWS resources in the following order:\nA. Delete Database Resources 1. Delete the Database Go to Database instance.\nClick Actions → Delete.\nConfirm the delete action.\n2. Delete Snapshot In the left navigation menu, go to the Snapshots tab.\nSelect the snapshot instance you want to delete.\nClick Actions → Delete snapshot.\nConfirm the Delete action.\n3. Delete RDS Security Group Go to EC2 service → select Security Groups.\nSelect the Security Group created specifically for RDS.\nClick Actions → Delete security groups.\n4. Delete AWS Backup Go to AWS Backup service → select Backup plans. Select the Backup plan created specifically for RDS. Click Delete B. Delete Elastic Beanstalk Resources 1. Delete IAM Role (Manually remove if any IAM roles related to Elastic Beanstalk exist.)\n2. Delete Elastic Beanstalk Application Go to the Elastic Beanstalk service, then go to Applications.\nSelect the application to delete, then click Actions → Delete application.\nConfirm the deletion.\n3. Delete Elastic Beanstalk Security Group Go to EC2 → select Security Groups.\nChoose the Security Group created for the Elastic Beanstalk environment.\nClick Actions → Delete security groups.\nC. Delete S3 and CloudFront Resources 1. Delete S3 Bucket for Static Website Go to the S3 service.\nSelect the S3 Bucket that contains the static website assets.\nClick Empty bucket to remove all data inside the bucket.\nConfirm the data deletion.\nProceed to delete the bucket.\nConfirm the bucket deletion.\n👉 Repeat the above steps to delete the S3 bucket used for image storage.\n2. Delete CloudFront Distribution Go to the CloudFront service.\nSelect the Distribution to be deleted → click Disable.\nAfter some time (once the status changes to \u0026ldquo;Disabled\u0026rdquo;), click Delete to remove the distribution.\n✅ So, we have completed the resource cleanup.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://mrhh-k22.github.io/AWS-workshop/tags/","title":"Tags","tags":[],"description":"","content":""}]