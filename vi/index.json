[{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Giới thiệu tổng quan về bài lab Mục đích Các dịch vụ AWS được sử dụng Kiến trúc hệ thống Nội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/1-introduce/1.1-purpose/","title":"Mục đích","tags":[],"description":"","content":"Mục đích Mục đích của bài lab là cung cấp cho người học một trải nghiệm thực hành toàn diện về việc xây dựng ứng dụng web hiện đại. Bằng cách sử dụng các dịch vụ của AWS để hỗ trợ chúng ta trong việc xây dựng một ứng dụng web hiện đại, có khả năng mở rộng và tiết kiệm chi phí.\nCác mục tiêu học tập Xây dựng ứng dụng thực tế: Tạo ra web app có đầy đủ tính năng CRUD và upload hình ảnh\nTối ưu hiệu năng: Áp dụng best practices cho bảo mật và performance\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/4-deploy-backend/4.1-image-s3-bucket/","title":"Tạo S3 Bucket mới dành cho việc lưu trữ/truy xuất hình ảnh","tags":[],"description":"","content":"Tạo S3 Bucket Truy cập AWS Management Console tại https://aws.amazon.com/\nTìm kiếm và chọn dịch vụ S3.\nTrong mục General purpose buckets, chọn Create Bucket.\nĐặt tên bucket: jobseeker-uploadimage\nTrong phần Block Public Access settings, thực hiện:\nTắt toàn bộ các tùy chọn chặn truy cập công khai (Block Public Access) Giữ nguyên các thiết lập còn lại mặc định.\nNhấn Create Bucket để hoàn tất.\nKết quả sau khi tạo S3 Bucket: ⚠️ Lưu lại tên bucket và khu vực (region) để sử dụng cho phần cấu hình backend.\nThiết lập Bucket Policy Chuyển sang tab Permissions của bucket.\nCuộn xuống phần Bucket policy và nhấn Edit.\nDán đoạn JSON sau vào phần policy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowPublicRead\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::jobseeker-uploadimage/*\u0026#34; } ] } Đây là một bucket policy của AWS S3 cho phép tất cả có thể tải về (read) các file trong bucket jobseeker-uploadimage. ⚠️ Nếu bạn sử dụng tên bucket khác, hãy thay thế jobseeker-uploadimage trong phần \u0026quot;Resource\u0026quot; bằng tên bucket của bạn.\nNhấn Save để lưu lại policy. ✅ Như vậy, bạn đã hoàn tất việc thiết lập một S3 Bucket để phục vụ lưu trữ và truy xuất hình ảnh.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/","title":"Thiết kế hệ thống web app sử dụng Elastic Beanstalk và CloudFront","tags":[],"description":"","content":"Thiết kế hệ thống web app sử dụng Elastic Beanstalk và CloudFront Tổng quan Trong bài lab này, bạn sẽ học cách xây dựng một ứng dụng web hoàn chỉnh trên nền tảng điện toán đám mây AWS. Bài lab tập trung vào thực hành, giúp bạn làm quen với các dịch vụ đa dạng của AWS thông qua các bước triển khai thực tế.\nCụ thể, bạn sẽ được hướng dẫn sử dụng:\nAmazon S3: Lưu trữ website tĩnh Amazon RDS: Lưu trữ cơ sở dữ liệu SQL AWS Elastic Beanstalk: Triển khai và mở rộng ứng dụng web Amazon CloudFront: Phân phối nội dung và bảo mật truy cập Mục tiêu của workshop là giúp bạn hiểu cách triển khai một hệ thống ứng dụng thực tế trên môi trường đám mây.\nChi phí ước tính Workshop này không phát sinh chi phí vì bạn sẽ sử dụng gói AWS Free Tier (miễn phí 12 tháng đầu cho tài khoản mới), bao gồm quyền truy cập vào các dịch vụ cơ bản của AWS.\nThời gian hoàn thành ước tính Thời lượng workshop khoảng 2–3 giờ, bao gồm các bước thực hành trực tiếp trên AWS Console:\nGiới thiệu (15–20 phút):\nMục tiêu Các dịch vụ AWS Kiến trúc hệ thống Yêu cầu tiên quyết (5–10 phút):\nTài khoản AWS IDE, môi trường phát triển Thực hành triển khai (60–90 phút):\nTạo cơ sở dữ liệu Triển khai backend Triển khai frontend Dọn dẹp tài nguyên (15–20 phút):\nXóa toàn bộ tài nguyên để tránh phát sinh chi phí sau khi kết thúc Nội dung Giới thiệu Yêu cầu tiên quyết Thiết kế cơ sở dữ liệu sử dụng AWS RDS Triển khai Backend với AWS Beanstalk Xây dựng \u0026amp; triển khai Frontend tĩnh Kiểm tra các tính năng trong chương trình Dọn dẹp tài nguyên "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/3-create-database/3.1-security-group/","title":"Thiết lập Security Group cho Database","tags":[],"description":"","content":"Tạo 1 Security Group mới Truy cập trang chủ AWS Management Console tại https://aws.amazon.com/\nTìm kiếm và chọn dịch vụ VPC.\nTrong bảng điều khiển VPC (VPC Dashboard), chọn Security Groups.\nNhấn nút Create Security Group để tạo mới.\nTrong phần Basic Details, điền thông tin như sau:\nSecurity group name: jobseeker-db Description: Allow RDS port to anywhere VPC: Chọn VPC mặc định (default VPC) Thêm một Inbound Rule mới:\nType: MySQL/Aurora Source: Anywhere - IPv4 Lưu ý: Outbound Rules để mặc định.\nNhấn Create Security Group để hoàn tất. Kết quả sau khi tạo thành công Security Group: "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/6-testing/6.1-registerlogin/","title":"Tính năng Đăng Ký/Đăng Nhập","tags":[],"description":"","content":"A. Tính năng Đăng ký Truy cập vào trang web và bấm vào nút Đăng nhập.\nTrong hộp thoại đăng nhập, bấm vào nút Đăng ký.\nNhập đầy đủ thông tin người dùng và nhấn Submit để gửi biểu mẫu.\nNếu thành công, hệ thống sẽ hiển thị thông báo: \u0026ldquo;Đăng ký tài khoản thành công\u0026rdquo;.\nKiểm tra trong cơ sở dữ liệu Mở MySQL Workbench và truy cập vào cơ sở dữ liệu của bạn.\nChọn bảng User.\nDữ liệu người dùng vừa đăng ký sẽ hiển thị trong bảng.\nB. Tính năng Đăng Nhập Sử dụng tài khoản đã đăng ký để đăng nhập vào hệ thống.\nSau khi đăng nhập thành công, hệ thống sẽ chuyển sang trang chính hoặc giao diện người dùng.\n✅ Như vậy, chúng ta đã hoàn tất việc kiểm tra chức năng Đăng ký và Đăng nhập.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/5-deploy-frontend/5.1-setup-react-app/","title":"Triển khai React web app","tags":[],"description":"","content":"Clone react app về clone github respository này về với đường dẫn sau:\ngit clone https://github.com/MrHH-k22/jobseeker-frontend.git Điều hướng đến thư mục của respository này\ncd jobseeker-frontend Chạy câu lệnh sau để cài đặt tất cả các thư viện cho dự án.\nnpm install Thêm biến môi trường\nVào file .env.production để cập nhật đường dẫn cho aws beanstalk và s3 bucket cho việc xử lý hình ảnh. Chạy câu lệnh sau để biên dịch mã nguồn app thành các mã HTML/CSS/JS tĩnh để chuẩn bị deploy lên server. npm run build Sau khi build thành công, một thư mục có tên dist sẽ được tạo ra, thư mục này chứa toàn bộ mã tĩnh của ứng dụng. -\u0026gt; Các file tĩnh trong thư mục này sẽ được sử dụng để triển khai lên AWS S3.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/1-introduce/1.2-services/","title":"Các dịch vụ AWS","tags":[],"description":"","content":"Các dịch vụ AWS sử dụng AWS Web Application Firewall AWS WAF là một dịch vụ bảo mật của AWS giúp bảo vệ các ứng dụng web khỏi các cuộc tấn công phổ biến như SQL injection, Cross-site scripting (XSS), DDos\u0026hellip;\nAmazon CloudFront Amazon CloudFront là dịch vụ mạng phân phối nội dung (CDN) giúp truyền tải dữ liệu một cách an toàn, với độ trễ thấp và tốc độ cao.\nAmazon S3 Amazon S3 (Simple Storage Service) là dịch vụ lưu trữ đối tượng, cho phép lưu và truy xuất dữ liệu một cách linh hoạt, an toàn và có khả năng mở rộng cao. S3 thường được sử dụng để lưu trữ ảnh, video, dữ liệu sao lưu, hoặc nội dung tĩnh của website.\nAWS IAM AWS IAM (Identity and Access Management) là dịch vụ quản lý người dùng và quyền truy cập trong hệ sinh thái AWS. IAM cho phép tạo người dùng, nhóm, vai trò và gán chính sách để kiểm soát truy cập đến các tài nguyên một cách bảo mật.\nAWS Elastic Beanstalk AWS Elastic Beanstalk giúp triển khai và quản lý ứng dụng web một cách tự động. Người dùng chỉ cần upload mã nguồn, còn lại Beanstalk sẽ xử lý cấu hình hạ tầng, cân bằng tải, mở rộng tự động và giám sát ứng dụng.\nAWS RDS AWS RDS (Relational Database Service) là dịch vụ cơ sở dữ liệu quan hệ được quản lý bởi AWS, hỗ trợ nhiều hệ quản trị như MySQL, PostgreSQL, SQL Server và Oracle. RDS giúp triển khai, vận hành, sao lưu, bảo mật và mở rộng cơ sở dữ liệu một cách dễ dàng.\nAWS Backup AWS Backup là dịch vụ tự động sao lưu và phục hồi dữ liệu cho nhiều dịch vụ AWS như EBS, RDS, DynamoDB, S3, v.v. Dịch vụ này cung cấp khả năng quản lý tập trung, lập lịch sao lưu, kiểm soát chính sách lưu trữ và đảm bảo tuân thủ các yêu cầu bảo mật.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/6-testing/6.2-s3image-testing/","title":"Kiểm tra lưu trữ hình ảnh","tags":[],"description":"","content":"Tạo một Company mới Truy cập vào Dashboard, chọn tab Company.\nNhấn vào nút Thêm mới.\nNhập đầy đủ thông tin công ty và chọn hình ảnh, sau đó bấm Tạo mới.\nSau khi tạo thành công, thông tin công ty sẽ được hiển thị:\nQuay lại trang chủ, bạn sẽ thấy công ty vừa tạo đã xuất hiện.\nKiểm tra trên AWS S3 Truy cập vào S3 Bucket để kiểm tra xem hình ảnh đã được lưu trữ thành công hay chưa.\n✅ Hình ảnh đã được lưu trữ thành công trên S3.\nKiểm tra trong cơ sở dữ liệu Trong bảng Company, dữ liệu được lưu kèm theo đường dẫn URL trỏ tới file hình ảnh trên S3 Bucket.\n✅ Như vậy, chúng ta đã kiểm tra thành công tính năng lưu trữ hình ảnh trong dự án.\nNote:\nCác tính năng khác cũng sẽ được thực hiện và kiểm tra tương tự. "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/3-create-database/3.2-create-rds/","title":"Tạo Instance RDS (MySQL)","tags":[],"description":"","content":"Tạo một Database Mới với Amazon RDS Truy cập AWS Management Console tại https://aws.amazon.com/\nTìm kiếm và chọn dịch vụ RDS hoặc Aurora and RDS.\nNhấn nút Create a database. Trong phần Create database, cấu hình như sau:\nDatabase creation method: Standard Create Engine type: MySQL Engine version: 8.0.41 RDS Extended Support: Tắt Template và Availability \u0026amp; Durability:\nĐể mặc định vì sử dụng gói Free tier. Settings:\nDB instance identifier: jobseeker-db Master username: admin Credential management: Self-managed Master password: Admin2025 (hoặc sử dụng mật khẩu mạnh hơn) ⚠️ Ghi nhớ các thông tin này để sử dụng trong phần cấu hình backend sau.\nInstance configuration và Storage:\nGiữ các thiết lập mặc định. Có thể giảm dung lượng xuống 20 GB do bài lab không yêu cầu nhiều. Connectivity:\nVPC: Chọn VPC mặc định Security group: Chọn Security group đã tạo ở bước trước Public access: Chọn Yes Các mục còn lại: Để mặc định Nhấn Create Database để bắt đầu tạo. Kết quả sau khi tạo xong: ⚠️ Lưu database endpoint để sử dụng trong phần cấu hình backend.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/5-deploy-frontend/5.2-deploy-to-s3/","title":"Tạo S3 bucket để triển khai React web app","tags":[],"description":"","content":"A. Tạo S3 Bucket Truy cập AWS Management Console tại https://aws.amazon.com/\nTìm kiếm và chọn dịch vụ S3.\nTrong mục General purpose buckets, chọn Create Bucket.\nĐặt tên bucket: jobseeker-frontend\nTrong phần Block Public Access settings, thực hiện:\nTắt toàn bộ các tùy chọn chặn truy cập công khai (Block Public Access) Giữ nguyên các thiết lập còn lại mặc định.\nNhấn Create Bucket để hoàn tất.\nKết quả sau khi tạo S3 Bucket: B. Tải các mã tĩnh lên s3 bấm nút upload để bắt đầu tải các file: kéo toàn bộ các file đã biên dịch trong bước trước nằm trong thư mục dist và thả vào bấm upload để bắt đầu tải Kết quả khi tải thành công: C. Bật tính năng lưu trữ website tĩnh của S3 vào tab properties Cuộn xuống đến phần Static website hosting Nhấn Edit Bật tính năng cho phép Static website hosting Chỉnh các mục sau: Hosting type:Host a static website Index document: nhập index.html Error document: nhập index.html Nhấn Save changes để lưu lại toàn bộ D. Thiết lập Bucket Policy Chuyển sang tab Permissions của bucket.\nCuộn xuống phần Bucket policy và nhấn Edit.\nDán đoạn JSON sau vào phần policy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::jobseeker-frontend/*\u0026#34; } ] } ⚠️ Nếu bạn sử dụng tên bucket khác, hãy thay thế jobseeker-frontend trong phần \u0026quot;Resource\u0026quot; bằng tên bucket của bạn.\nNhấn Save để lưu lại policy. ✅ Như vậy, bạn đã hoàn tất việc Triển khai react web app lên một S3 Bucket.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/4-deploy-backend/4.2-setup-springboot-app/","title":"Thiết lập spring boot app","tags":[],"description":"","content":"Clone springboot app về clone github respository này về với đường dẫn sau:\ngit clone https://github.com/MrHH-k22/jobseeker-backend.git Điều hướng đến thư mục của respository này\ncd jobseeker-backend Chạy câu lệnh sau để đóng gói một spring boot app thành file jar\n./gradlew bootJar tại thư mục của respository, vào build/libs/ để lấy ra file jar -\u0026gt; file jar này chúng ta sẽ dùng để deploy lên AWS Beanstalk\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/2-prerequiste/","title":"Yêu cầu tiên quyết","tags":[],"description":"","content":"A. Tài khoản và quyền truy cập Tài khoản AWS có đầy đủ quyền truy cập các dịch vụ:\nAmazon S3 (Simple Storage Service) Amazon RDS (Relational Database Service) AWS Elastic Beanstalk Amazon CloudFront AWS IAM (Identity and Access Management) Amazon VPC (Virtual Private Cloud) Amazon EC2 (Elastic Compute Cloud) Khuyến nghị: Tạo và sử dụng tải khoản AWS root\nB. Môi trường phát triển Node.js (phiên bản 16 trở lên) npm hoặc yarn package manager Git để clone repository Text editor (VS Code, IntelliJ, v.v.) Java JDK 17 trở lên IDE hỗ trợ Java (IntelliJ IDEA, Eclipse, v.v.) C. Kiến thức cơ bản Hiểu biết cơ bản về các dịch vụ AWS core:\nS3 buckets và bucket policies RDS và MySQL database Elastic Beanstalk deployment CloudFront distribution IAM roles và policies D. Chuẩn bị trước khi bắt đầu 1. Repository cần thiết Truy cập được các GitHub repositories: Frontend: https://github.com/MrHH-k22/jobseeker-frontend.git Backend: https://github.com/MrHH-k22/jobseeker-backend.git 2. Chuẩn bị thông tin Ghi chú sẵn các thông tin sẽ cần dùng: Tên các S3 buckets Database credentials Region sử dụng (khuyến nghị: ap-southeast-1) Endpoint URLs E. Ước tính chi phí ⚠️ Lưu ý quan trọng: Workshop này sử dụng các dịch vụ AWS có thể phát sinh chi phí:\nRDS MySQL: ~$15-25/tháng (nếu không dùng Free Tier) Elastic Beanstalk: Miễn phí (chỉ trả phí EC2 instance) S3: ~$1-5/tháng tùy usage CloudFront: ~$1-10/tháng tùy traffic Khuyến nghị: Thực hiện cleanup sau khi hoàn thành để tránh chi phí không mong muốn.\n✅ Sau khi đã chuẩn bị đầy đủ các yêu cầu trên, bạn có thể tiến hành các bước tiếp theo của workshop.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/4-deploy-backend/4.3-configure-iam-role/","title":"Cấu Hình IAM Role cho AWS Beanstalk","tags":[],"description":"","content":"Tạo các IAM Role cho AWS Elastic Beanstalk Truy cập AWS Management Console tại https://aws.amazon.com/\nTìm kiếm và chọn dịch vụ Identity and Access Management (IAM).\nChuyển sang tab Roles và nhấn Create role để bắt đầu. A. Tạo Role cho EC2 Instance bên trong môi trường Beanstalk Bước 1: Chọn Trusted Entity Trusted entity type: AWS Service Service or use case: EC2 Use case: EC2 Bước 2: Thêm quyền (Permissions) Tìm kiếm và thêm các chính sách sau:\nAmazonS3FullAccess Cho phép EC2 truy cập vào S3 để lưu trữ và truy xuất hình ảnh.\nAWSElasticBeanstalkCustomPlatformforEC2Role Cấp quyền để EC2 có thể build và chạy các nền tảng tùy chỉnh trong Elastic Beanstalk.\nBước 3: Đặt tên và hoàn tất Role name: aws-elasticbeanstalk-ec2-role Kiểm tra lại các policy đã thêm trước khi nhấn Create role. ✅ Kết quả sau khi tạo role thành công: B. Tạo Role cho Elastic Beanstalk Service Thực hiện lại các bước như ở phần A, nhưng với cấu hình sau:\nTrusted Entity Service or use case: Elastic Beanstalk Use case: Elastic Beanstalk - Environment Thêm các policy sau: AWSElasticBeanstalkEnhancedHealth AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy Những policy này cho phép Beanstalk quản lý tình trạng và cập nhật môi trường hiệu quả hơn.\nRole name: aws-elasticbeanstalk-service-role ✅ Kết quả sau khi tạo: "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/3-create-database/3.3-connect/","title":"Kết nối tới MySQL Workbench","tags":[],"description":"","content":"Kết nối tới MySQL Workbench Trong MySQL Workbench, tạo một kết nối mới bằng cách chọn MySQL Connections \u0026gt; + (Add Connection).\nNhập các thông tin kết nối như sau: Connection name: tên connection (aws-jobseeker-db) Hostname: endpoint của database (được cung cấp khi tạo RDS) Username: tên người dùng cơ sở dữ liệu (admin) Password: mật khẩu của cơ sở dữ liệu (Admin2025) Sau khi nhập đầy đủ thông tin, nhấn vào kết nối vừa tạo để bắt đầu kết nối:\n✅ Kết nối thành công nếu không có lỗi xảy ra và giao diện database được hiển thị.\nTạo scheme mới trong MySQL Connection Bấm chuột phải và chọn Create Schema.. Nhập tên scheme: jobseeker-db Nhấn apply ⚠️ Lưu tên scheme này để sử dụng trong phần cấu hình backend sau.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/1-introduce/1.3-architecture/","title":"Kiến trúc hệ thống","tags":[],"description":"","content":"Tổng quan kiến trúc Hệ thống được thiết kế theo nguyên tắc microservices và cloud-native, sử dụng các dịch vụ được quản lý sẵn của AWS. Điều này giúp giảm thiểu công việc quản trị hạ tầng, cho phép tập trung vào phát triển logic nghiệp vụ.\nKiến trúc 3 lớp Ứng dụng sử dụng kiến trúc 3-tier layers, bao gồm:\n1. Presentation Tier – Giao diện người dùng Sử dụng các dịch vụ sau để triển khai trang web tĩnh:\nAWS WAF Bảo vệ các ứng dụng web khỏi các cuộc tấn công phổ biến như SQL injection, Cross-site scripting (XSS), DDos\u0026hellip;\nAWS CloudFront\nPhân phối nội dung tĩnh (HTML, CSS, JS) từ Amazon S3 đến người dùng cuối.\nAWS S3\nLưu trữ website tĩnh — chính là ứng dụng ReactJS đã được build.\n2. Application Tier – Xử lý nghiệp vụ Sử dụng các dịch vụ AWS để xử lý logic nghiệp vụ:\nAWS Elastic Beanstalk\nTriển khai ứng dụng server-side được viết bằng Spring Boot một cách tự động, dễ quản lý.\nAWS IAM\nCấp quyền an toàn để Elastic Beanstalk có thể truy cập vào RDS và S3.\n3. Data Tier – Lưu trữ dữ liệu Sử dụng các dịch vụ sau:\nAmazon RDS (MySQL)\nLưu trữ dữ liệu nghiệp vụ với hệ quản trị cơ sở dữ liệu quan hệ MySQL.\nAWS S3\nLưu trữ các tệp tin như hình ảnh do người dùng tải lên.\nAWS Backup\nTự động sao lưu dữ liệu từ Amazon RDS để đảm bảo khả năng phục hồi khi có sự cố.\nLuồng hoạt động của hệ thống Người dùng truy cập website thông qua CloudFront endpoint. CloudFront tiếp nhận yêu cầu và kiểm tra xem các tệp frontend đã được cache ở edge location chưa: Nếu có → trả về trực tiếp. Nếu chưa → CloudFront lấy file từ Amazon S3 rồi trả về cho người dùng. Sau khi tải xong giao diện, website sẽ gửi các request API (HTTP) đến backend đang chạy trên Elastic Beanstalk. Elastic Beanstalk tiếp nhận yêu cầu và kết nối đến Amazon RDS để truy xuất hoặc lưu trữ dữ liệu. "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/5-deploy-frontend/5.3-cloudfront/","title":"Phân phối nội dung web tĩnh với CloudFront","tags":[],"description":"","content":"A. Tạo AWS CloudFront Truy cập AWS Management Console tại https://aws.amazon.com/.\nTìm kiếm và chọn dịch vụ CloudFront.\nTrong mục Distributions, nhấn Create Distributions.\nBước 1: Khởi tạo Distribution Nhập tên Distribution: jobseeker-frontend\nBước 2: Cấu hình Origin Chọn Origin type: Amazon S3\nTrong phần S3 origin, chọn Browse S3.\nTick chọn Allow private S3 bucket access to CloudFront Chọn S3 bucket đã tạo từ trước Sau khi chọn xong, AWS có thể gợi ý sử dụng website endpoint do bucket đã bật tính năng lưu trữ web tĩnh.\n➤ Nhấn Use website endpoint để cập nhật endpoint:\nKết quả S3 endpoint sau khi chọn:\n📌 Lưu ý: Nếu AWS không hiển thị gợi ý, bạn có thể tự nhập endpoint theo cấu trúc sau:\nhttp://{bucket-name}.s3-website.{region}.amazonaws.com Bước 5: Thiết lập bảo mật (Enable Security) Chọn: Enable security protections\nBật AWS WAF giúp bảo mật web hơn vì ngăn chặn các tấn công phổ biến như SQL Injection, XSS, và HTTP Flood. Đồng thời chặn các yêu cầu độc hại ngay tại CloudFront, giảm tải cho backend.\nSau đó, kiểm tra lại toàn bộ cấu hình và nhấn Create distribution để hoàn tất quá trình tạo. D. Kết quả sau khi triển khai CloudFront E. Cấu hình lại Behaviour cho CloudFront Chuyển sang tab Behaviours\nChọn một behaviour và nhấn Edit\nChỉnh sửa các mục sau:\nViewer protocol policy: HTTP and HTTPS Allowed HTTP methods: GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE Các mục còn lại giữ nguyên → nhấn Save Changes để lưu lại cấu hình.\nF. Kiểm tra CloudFront Endpoint Sao chép Distribution domain name và dán vào trình duyệt để kiểm tra kết quả.\nGiao diện website sau khi phân phối thành công:\n✅ Như vậy, bạn đã hoàn tất việc phân phối nội dung web tĩnh thông qua Amazon CloudFront một cách hiệu quả.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/3-create-database/","title":"Thiết kế cơ sở dữ liệu sử dụng AWS RDS","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ thiết kế và triển khai cơ sở dữ liệu cho ứng dụng JobSeeker sử dụng dịch vụ Amazon RDS (Relational Database Service). Cơ sở dữ liệu đóng vai trò quan trọng trong việc lưu trữ và quản lý dữ liệu nghiệp vụ của ứng dụng.\nMục tiêu Tạo và cấu hình Security Group cho database để đảm bảo tính bảo mật Triển khai instance MySQL trên Amazon RDS với cấu hình phù hợp Thiết lập kết nối và chuẩn bị schema cho ứng dụng Nội dung Thiết lập Security Group cho Database - Tạo và cấu hình security group để kiểm soát truy cập đến database Tạo Instance RDS (MySQL) - Triển khai database MySQL trên Amazon RDS Kết nối tới MySQL Workbench - Thiết lập kết nối và tạo schema cho ứng dụng "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/3-create-database/3.4-aws-backup/","title":"Bật Tính năng sao lưu dữ liệu cho AWS RDS","tags":[],"description":"","content":"Tạo AWS Backup 🔹 Bước 1: Truy cập dịch vụ AWS Backup Mở AWS Management Console tại: https://aws.amazon.com/ Tìm kiếm và chọn dịch vụ AWS Backup. 🔹 Bước 2: Tạo Backup Plan Chọn mục Backup plans → nhấn Create backup plan.\nCấu hình kế hoạch sao lưu như sau:\nBackup plan options: Build a new plan Backup plan name: jobseeker-db-weekly Backup rule name: weekly-rule Backup vault: Default Backup frequency: Weekly Các mục còn lại giữ nguyên mặc định. Nhấn Create plan để tạo kế hoạch sao lưu. 🔹 Bước 3: Gán tài nguyên cần sao lưu Cấu hình phần Assign resources:\nResource assignment name: assign-rds IAM role: Default role Define resource selection: Chọn Include specific resource types Select specific resource types: Chọn RDS Database names: Chọn jobseeker-db Nhấn Assign resources để hoàn tất.\nKết quả sau khi tạo AWS Backup ✅ Bạn đã hoàn tất việc thiết lập AWS Backup để sao lưu và phục hồi cơ sở dữ liệu RDS theo lịch hàng tuần một cách tự động.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/5-deploy-frontend/5.4-fix-cors/","title":"Sửa lỗi Cross-Origin Resource Sharing","tags":[],"description":"","content":"A. Vấn đề Khi mở Developer Console trên trình duyệt, ta thấy lỗi CORS như sau:\nGiải thích:\nLỗi CORS xảy ra khi frontend (CloudFront) gửi request đến backend (Elastic Beanstalk) khác domain, nhưng backend không cho phép domain đó truy cập. Cụ thể, backend chưa trả về header Access-Control-Allow-Origin, dẫn đến trình duyệt chặn request vì lý do bảo mật.\nB. Giải pháp 1. Cấu hình lại CORS trong backend Mở project jobseeker_backend.\nTruy cập file config/CorsConfig.java.\nCập nhật lại endpoint frontend bằng cách:\nSao chép endpoint CloudFront Thêm vào phương thức setAllowedOrigins Giải thích các cấu hình: setAllowedOrigins: Chỉ định các domain được phép gửi request đến backend. setAllowedMethods: Cho phép các HTTP method như GET, POST, v.v. setAllowedHeaders: Chỉ định các header mà client có thể gửi. setAllowCredentials: Cho phép gửi kèm cookie hoặc token xác thực như JWT. setMaxAge: Thiết lập thời gian cache cho preflight request. registerCorsConfiguration(\u0026quot;/**\u0026quot;): Áp dụng CORS cho tất cả các endpoint. Lưu lại file sau khi chỉnh sửa. 2. Build lại file .jar và triển khai lại backend Thực hiện các bước build lại file .jar tương tự như mục 4.2 trước đó.\nTruy cập AWS Management Console, chọn dịch vụ Elastic Beanstalk.\nVào ứng dụng backend.\nChọn tab Application versions.\nNhấn Upload, chọn file .jar vừa build.\nĐặt tên phiên bản: version02 và upload.\nSau khi upload thành công, chọn phiên bản vừa tạo → nhấn Actions → chọn Deploy. Chọn môi trường tương ứng và nhấn Deploy để triển khai. ✅ Như vậy, bạn đã hoàn tất việc sửa lỗi CORS, đảm bảo frontend và backend có thể kết nối với nhau an toàn và đúng cách.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/4-deploy-backend/4.4-create-beanstalk/","title":"Triển khai AWS Beanstalk","tags":[],"description":"","content":"Tạo AWS Beanstalk Truy cập AWS Management Console tại https://aws.amazon.com/\nTìm kiếm và chọn dịch vụ Elastic Beanstalk.\nTrong tab Application, nhấn Create a new application. Application name: jobseekers-backend Sau khi tạo Application, tiến hành tạo mới một Environment. Bước 1: Configure Environment Ở phần Environment tier \u0026amp; Information: Chọn Web server environment Environment name: Jobseekers-backend-env Các mục còn lại giữ nguyên mặc định Ở phần Platform: Platform: Java Platform branch: Corretto 17 running on 64 bit Amazon Linux 2023 Platform version: 4.6.1 Ở phần Application code: Chọn Upload your code Version label: version01 Chọn Local file và upload file .jar đã tạo từ bước trước Nhấn Next để tiếp tục Bước 2: Configure Service Access Service role: chọn role aws-elasticbeanstalk-service-role đã tạo trước đó EC2 instance profile: chọn role aws-elasticbeanstalk-ec2-rolee đã tạo trước đó EC2 key pair: để trống Bước 3: Set Up Networking, Database, and Tags Giữ nguyên toàn bộ cấu hình mặc định và tiếp tục sang bước kế tiếp Bước 4: Configure Instance Traffic and Scaling Giữ nguyên cấu hình mặc định Elastic Beanstalk sẽ tự động thiết lập EC2 và Security Group nên không cần cấu hình thủ công Bước 5: Configure Updates, Monitoring, and Logging Cuộn xuống cuối trang và thêm các biến môi trường cần thiết cho backend Xóa bỏ các biến môi trường không sử dụng, và cấu hình lại các biến môi trường mới như sau: Key Value AWS_S3_BASE_FOLDER uploads/ AWS_S3_BUCKET Tên của S3 bucket đã tạo ở bước trước (ví dụ: jobseeker-uploadimage) AWS_S3_REGION Vùng (region) của S3 bucket, ví dụ: ap-southeast-1 GRADLE_HOME /usr/local/gradle HOIDANIT_JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS 3600 HOIDANIT_JWT_BASE64_SECRET UxaISAcJlpUx5+626BrxPYyMFphS5WCem/tODCjONXDyKg9wTaZyzwwhi7k6YLs3eJwn4eYdlrdLAYAyrT5FXQ== HOIDANIT_JWT_REFRESH_TOKEN_VALIDITY_IN_SECONDS 2592000 M2 /usr/local/apache-maven/bin M2_HOME /usr/local/apache-maven PORT 8080 SPRING_DATASOURCE_PASSWORD Mật khẩu truy cập cơ sở dữ liệu (do bạn thiết lập khi tạo database) SPRING_DATASOURCE_URL JDBC URL của cơ sở dữ liệu (ví dụ: jdbc:mysql://\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;scheme\u0026gt;) SPRING_DATASOURCE_USERNAME Tên đăng nhập cơ sở dữ liệu (ví dụ: admin) SPRING_JPA_HIBERNATE_DDL_AUTO update Nhấn nút Create để bắt đầu khởi tạo môi trường AWS Elastic Beanstalk. Kết quả sau khi tạo AWS Beanstalk Sau khi tạo xong, nhấn vào đường link của backend được hiển thị trên màn hình. Nếu truy cập thành công và nhận được thông báo như bên dưới, nghĩa là backend đã được triển khai thành công: "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/4-deploy-backend/","title":"Triển khai Backend với AWS Beanstalk","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ triển khai ứng dụng backend Java Spring Boot lên AWS Elastic Beanstalk để xử lý các API và logic nghiệp vụ. AWS Elastic Beanstalk sẽ tự động cấu hình EC2, tạo Security Group, và quản lý network interfaces, giúp đơn giản hóa quá trình triển khai.\nMục tiêu Tạo S3 Bucket để lưu trữ hình ảnh upload từ người dùng Chuẩn bị và build ứng dụng Spring Boot thành file JAR Cấu hình IAM Roles cần thiết cho AWS Elastic Beanstalk Triển khai backend lên Elastic Beanstalk với các biến môi trường phù hợp Nội dung Tạo S3 Bucket cho hình ảnh - Tạo và cấu hình S3 bucket để lưu trữ files upload Thiết lập Spring Boot app - Clone, build và chuẩn bị file JAR cho deployment Cấu hình IAM Role - Tạo các IAM roles cần thiết cho Elastic Beanstalk Triển khai AWS Beanstalk - Tạo và cấu hình môi trường Elastic Beanstalk "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/1-introduce/1.4-app/","title":"Ứng dụng triển khai","tags":[],"description":"","content":"Ứng dụng Triển khai JobSeeker là một ứng dụng web tìm việc làm, được phát triển theo kiến trúc hiện đại với các tính năng chính sau:\n🎯 Tính năng chính Quản lý người dùng\nCho phép đăng ký, đăng nhập và xác thực bằng JWT.\nQuản lý công ty\nTạo và chỉnh sửa thông tin công ty, bao gồm khả năng upload logo.\nQuản lý việc làm\nĐăng tin tuyển dụng, tìm kiếm công việc và nộp hồ sơ ứng tuyển.\nUpload hình ảnh\nLưu trữ và quản lý hình ảnh người dùng thông qua dịch vụ AWS S3.\n⚠️ Lưu ý Workshop này được thực hiện trong quá trình học tập, vì vậy một số tính năng có thể chưa hoàn thiện. Mục tiêu chính là giúp người học làm quen với quy trình triển khai và vận hành hệ thống trên nền tảng AWS Cloud, không tập trung vào việc hoàn chỉnh toàn bộ nghiệp vụ của ứng dụng.\n📄 Bản quyền Ứng dụng JobSeeker là sản phẩm thuộc bản quyền của tác giả Hỏi Dân IT.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/5-deploy-frontend/","title":"Xây dựng &amp; triển khai Frontend tĩnh","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ xây dựng và triển khai ứng dụng frontend React lên Amazon S3 và sử dụng CloudFront để phân phối nội dung. Việc sử dụng S3 và CloudFront giúp tối ưu hóa hiệu suất, giảm độ trễ và cung cấp trải nghiệm người dùng tốt hơn thông qua CDN toàn cầu.\nMục tiêu Chuẩn bị và build ứng dụng React thành static files Cấu hình S3 bucket để host static website Thiết lập CloudFront distribution để tăng tốc độ truy cập Kết nối frontend với backend API đã triển khai Nội dung Chuẩn bị React App - Clone, cấu hình và build ứng dụng React Tạo S3 cho Static Website - Tạo và cấu hình S3 bucket để host static website Triển khai CloudFront - Thiết lập CloudFront distribution cho CDN Sửa lỗi CORS - Sửa lỗi CORS "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/6-testing/","title":"Kiểm tra các tính năng trong chương trình","tags":[],"description":"","content":"Tổng quan Trong phần này, chúng ta sẽ thực hiện kiểm tra toàn diện các tính năng của ứng dụng JobSeeker đã được triển khai. Việc testing sẽ đảm bảo rằng tất cả các thành phần đã hoạt động chính xác và tích hợp với nhau một cách mượt mà.\nMục tiêu Xác minh chức năng đăng ký và đăng nhập người dùng Test các tính năng tạo, chỉnh sửa và quản lý công việc Kiểm tra tính năng upload và hiển thị hình ảnh từ S3 Nội dung Kiểm tra đăng ký \u0026amp; đăng nhập - Test các chức năng authentication và authorization Kiểm tra upload hình ảnh - Test chức năng upload và hiển thị hình ảnh lên S3 "},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/7-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Dọn dẹp các tài nguyên AWS Chúng ta sẽ thực hiện dọn dẹp các tài nguyên AWS theo thứ tự sau:\nA. Xóa tài nguyên Database 1. Xóa Database Truy cập vào Database instance.\nChọn Actions → Delete.\nXác nhận thao tác xóa.\n2. Xóa Snapshot Trong menu điều hướng bên trái, chọn tab Snapshots.\nChọn snapshot instance cần xóa.\nNhấn Actions → Delete snapshot.\nXác nhận thao tác Xóa.\n3. Xóa Security Group của RDS Truy cập dịch vụ EC2 → chọn Security Groups.\nChọn Security Group được tạo riêng cho RDS.\nNhấn Actions → Delete security groups.\n4. Xóa AWS Backup Truy cập dịch vụ AWS Backup → chọn Backup plans. Chọn Backup plan được tạo riêng cho RDS. Chọn Delete để xóa B. Xóa tài nguyên Elastic Beanstalk 1. Xóa IAM Role (Thực hiện thủ công theo yêu cầu nếu có IAM role liên quan đến Elastic Beanstalk.)\n2. Xóa Elastic Beanstalk Application Truy cập dịch vụ Elastic Beanstalk, chọn mục Applications.\nChọn ứng dụng cần xóa, sau đó nhấn Actions → Delete application.\nXác nhận thao tác xóa.\n3. Xóa Security Group của Elastic Beanstalk Truy cập EC2 → chọn Security Groups.\nChọn Security Group đã tạo riêng cho môi trường Elastic Beanstalk.\nNhấn Actions → Delete security groups.\nC. Xóa tài nguyên S3 và CloudFront 1. Xóa S3 Bucket lưu web tĩnh Truy cập dịch vụ S3.\nChọn S3 Bucket đang chứa tài nguyên web tĩnh.\nNhấn Empty bucket để xóa toàn bộ dữ liệu trong bucket.\nXác nhận thao tác xóa dữ liệu.\nThực hiện xóa bucket.\nXác nhận thao tác xóa bucket.\n👉 Lặp lại các bước trên để xóa S3 bucket dùng để lưu trữ hình ảnh.\n2. Xóa CloudFront Distribution Truy cập dịch vụ CloudFront.\nChọn Distribution cần xóa → nhấn Disable.\nSau một khoảng thời gian chờ đợi (khi trạng thái đã chuyển sang \u0026ldquo;Disabled\u0026rdquo;), nhấn Delete để xóa distribution.\n✅ Như vậy, chúng ta đã hoàn tất việc dọn dẹp tài nguyên.\n"},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://mrhh-k22.github.io/AWS-workshop/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]